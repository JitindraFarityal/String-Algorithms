/**
 * @author Jitindra Fartiyal
 * With the help of Hashing, we match the hash value of pattern and text and prune the time complexity 
 * by comparing the strings with same hash value only.
 * Update the code for more code - optimization.
 * Please provide your valued feedback
 */
package strings;
import java.util.*;

public class RabinKarp {

    public static long createHash(String s,int prime){
        char[] pattern = s.toCharArray();
        long hashValue = 0;
        for(int i=0;i<pattern.length;i++){
            hashValue+=(pattern[i]*Math.pow(prime,i));
        }
        return hashValue;
    }
    public static long findnewHash(long hashValue,char a, char b,int prime,int len){
        hashValue -= a;
        hashValue /= prime;
        hashValue += (b*Math.pow(prime, len));
        return hashValue;
    }
    public static int check (String s1, String s2){
        int result = 1;
        char[] str1 = s1.toCharArray();
        char[] str2 = s2.toCharArray();
        
        for(int i=0;i<str1.length;i++){
            if(str1[i]!=str2[i])
                return 0;
        }
        return result;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int prime = 101;
        System.out.println("Enter the text string");
        String text = sc.next();
        System.out.println("Enter the pattern string");
        String pattern = sc.next();
        
        if(text.length()>=pattern.length()){
            long patternHashValue = createHash(pattern,prime);    
            char[] textToSearch = text.toCharArray();
            int len = pattern.length();
            int i = 0, j = len, result = 0;
            long textHashValue=0;
            
            textHashValue = createHash(text.substring(0,len),prime);
            if(textHashValue == patternHashValue && check(text.substring(0,len),pattern)==1)
                result = 1;

            do{  
                if(result !=1){
                    textHashValue = findnewHash(textHashValue, textToSearch[i], textToSearch[j], prime, len-1);
                                
                    if(textHashValue == patternHashValue && check(text.substring(i+1,j+1),pattern)==1){
                        i++; result = 1; break;
                    }
                    
                    i++;
                    j++;
                }
                else 
                    break;
            }while(j<textToSearch.length);

            if(result == 1)
                System.out.println("Pattern is matched at index "+i);
            else
               System.out.println("Could not find the pattern");
        }    
        else
            System.out.println("Text length should be greater or equal to pattern length");
    }
}
